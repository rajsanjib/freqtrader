name: Deploy FreqTrade Bot

on:
  push:
    branches: [main, master, stable]
  pull_request:
    branches: [main, master, stable]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: freqtrade:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Create secure config for testing
        run: |
          # Create a temporary redacted config for testing
          cat user_data/config.json | jq '.exchange.key = "dummy" | .exchange.secret = "dummy" | .telegram.token = "dummy" | .telegram.chat_id = "dummy"' > user_data/config.test.json

      - name: Test configuration
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/user_data:/freqtrade/user_data \
            freqtrade:${{ github.sha }} \
            test-pairlist -c /freqtrade/user_data/config.test.json

      # Move cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file with secrets
        run: |
          cat > .env << EOL
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}
          EXCHANGE_KEY=${{ secrets.EXCHANGE_KEY }}
          EXCHANGE_SECRET=${{ secrets.EXCHANGE_SECRET }}
          FREQTRADE_STRATEGY=${{ secrets.FREQTRADE_STRATEGY || 'HarmonicDivergence' }}
          EOL

      - name: Create secure config for production
        run: |
          # Create a version of the config with redacted API keys
          cat user_data/config.json | jq '.exchange.key = "" | .exchange.secret = "" | .telegram.token = "" | .telegram.chat_id = ""' > user_data/config.secure.json
          mv user_data/config.secure.json user_data/config.json

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          scp docker-compose.prod.yml ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/freqtrade/
          scp -r user_data ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/freqtrade/
          scp .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/freqtrade/
          scp scripts/deploy_freqtrade.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/freqtrade/scripts/
          scp scripts/monitor_freqtrade.sh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:~/freqtrade/scripts/
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "chmod +x ~/freqtrade/scripts/*.sh && cd ~/freqtrade && scripts/deploy_freqtrade.sh"

      - name: Verify deployment
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "cd ~/freqtrade && docker-compose -f docker-compose.prod.yml ps"

      - name: Setup monitoring cron job
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} '(crontab -l 2>/dev/null || echo "") | grep -v "monitor_freqtrade.sh" | { cat; echo "*/15 * * * * $HOME/freqtrade/scripts/monitor_freqtrade.sh >> /dev/null 2>&1"; } | crontab -'
